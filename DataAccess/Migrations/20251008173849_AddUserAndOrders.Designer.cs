// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20251008173849_AddUserAndOrders")]
    partial class AddUserAndOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Musical"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Explorers travel through a wormhole in space to save humanity.",
                            Favorite = false,
                            GenreId = 1,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BYzdjMDAxZGItMjI2My00ODA1LTlkNzItOWFjMDU5ZDJlYWY3XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar",
                            TrailerUrl = "https://www.youtube.com/watch?v=zSWdZVtXT7E",
                            Year = 2013
                        },
                        new
                        {
                            Id = 2,
                            Description = "Batman faces the Joker, a criminal mastermind.",
                            Favorite = false,
                            GenreId = 4,
                            PosterUrl = "https://cdn.europosters.eu/image/1300/197743.jpg",
                            Rating = 5,
                            StartTime = new DateTime(2025, 8, 22, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Knight",
                            TrailerUrl = "https://www.youtube.com/watch?v=EXeTwQWrcwY",
                            Year = 2009
                        },
                        new
                        {
                            Id = 3,
                            Description = "A slow-witted man witnesses and influences historical events.",
                            Favorite = false,
                            GenreId = 2,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BNDYwNzVjMTItZmU5YS00YjQ5LTljYjgtMjY2NDVmYWMyNWFmXkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 22, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Forrest Gump",
                            TrailerUrl = "https://www.youtube.com/watch?v=bLvqoHBptjg",
                            Year = 1994
                        },
                        new
                        {
                            Id = 4,
                            Description = "A computer hacker learns the true nature of reality.",
                            Favorite = false,
                            GenreId = 1,
                            PosterUrl = "https://m.media-amazon.com/images/I/51ISve-1n1S._UF1000,1000_QL80_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 23, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix",
                            TrailerUrl = "https://www.youtube.com/watch?v=vKQi3bBA1y8",
                            Year = 1999
                        },
                        new
                        {
                            Id = 5,
                            Description = "The lives of two mob hitmen, a boxer, and others intertwine.",
                            Favorite = false,
                            GenreId = 6,
                            PosterUrl = "https://cdn.europosters.eu/image/750/1288.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pulp Fiction",
                            TrailerUrl = "https://www.youtube.com/watch?v=s7EdQ4FqbhY",
                            Year = 1994
                        },
                        new
                        {
                            Id = 6,
                            Description = "A former Roman General sets out to exact vengeance.",
                            Favorite = false,
                            GenreId = 4,
                            PosterUrl = "https://m.media-amazon.com/images/I/71sj8Yt20qL.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 24, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Gladiator",
                            TrailerUrl = "https://www.youtube.com/watch?v=owK1qxDselE",
                            Year = 2000
                        },
                        new
                        {
                            Id = 7,
                            Description = "A romance blooms aboard the ill-fated RMS Titanic.",
                            Favorite = false,
                            GenreId = 5,
                            PosterUrl = "https://m.media-amazon.com/images/I/71ZJ8am0mKL._UF894,1000_QL80_.jpg",
                            Rating = 3,
                            StartTime = new DateTime(2025, 8, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Titanic",
                            TrailerUrl = "https://www.youtube.com/watch?v=2e-eXJ6HgkQ",
                            Year = 1997
                        },
                        new
                        {
                            Id = 8,
                            Description = "A paraplegic Marine is dispatched to Pandora.",
                            Favorite = false,
                            GenreId = 1,
                            PosterUrl = "https://storage.googleapis.com/pod_public/750/262963.jpg",
                            Rating = 3,
                            StartTime = new DateTime(2025, 8, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avatar",
                            TrailerUrl = "https://www.youtube.com/watch?v=5PSNL1qE6VY",
                            Year = 2009
                        },
                        new
                        {
                            Id = 9,
                            Description = "The aging patriarch of an organized crime dynasty transfers control to his son.",
                            Favorite = false,
                            GenreId = 6,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BNGEwYjgwOGQtYjg5ZS00Njc1LTk2ZGEtM2QwZWQ2NjdhZTE5XkEyXkFqcGc@._V1_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Godfather",
                            TrailerUrl = "https://www.youtube.com/watch?v=sY1S34973zA",
                            Year = 1972
                        },
                        new
                        {
                            Id = 10,
                            Description = "An insomniac office worker forms an underground fight club.",
                            Favorite = false,
                            GenreId = 2,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BOTgyOGQ1NDItNGU3Ny00MjU3LTg2YWEtNmEyYjBiMjI1Y2M5XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 26, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fight Club",
                            TrailerUrl = "https://www.youtube.com/watch?v=SUXWAEX2jlg",
                            Year = 1999
                        },
                        new
                        {
                            Id = 11,
                            Description = "A young lion prince flees his kingdom only to learn the meaning of responsibility.",
                            Favorite = false,
                            GenreId = 7,
                            PosterUrl = "https://cdn.europosters.eu/image/1300/76297.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Lion King",
                            TrailerUrl = "https://www.youtube.com/watch?v=4sj1MT05lAA",
                            Year = 1994
                        },
                        new
                        {
                            Id = 12,
                            Description = "A promising young drummer enrolls at a cut-throat music conservatory.",
                            Favorite = false,
                            GenreId = 2,
                            PosterUrl = "https://upload.wikimedia.org/wikipedia/uk/archive/0/01/20160208075323%21Whiplash_poster.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 27, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Whiplash",
                            TrailerUrl = "https://www.youtube.com/watch?v=7d_jQycdQGo",
                            Year = 2014
                        },
                        new
                        {
                            Id = 13,
                            Description = "Two magicians engage in a bitter rivalry.",
                            Favorite = false,
                            GenreId = 8,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BMTM3MzQ5MjQ5OF5BMl5BanBnXkFtZTcwMTQ3NzMzMw@@._V1_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 27, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Prestige",
                            TrailerUrl = "https://www.youtube.com/watch?v=o4gHCmTQDVI",
                            Year = 2006
                        },
                        new
                        {
                            Id = 14,
                            Description = "The story of Facebook’s creation and its legal battles.",
                            Favorite = false,
                            GenreId = 9,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BMjlkNTE5ZTUtNGEwNy00MGVhLThmZjMtZjU1NDE5Zjk1NDZkXkEyXkFqcGc@._V1_.jpg",
                            Rating = 3,
                            StartTime = new DateTime(2025, 8, 28, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Social Network",
                            TrailerUrl = "https://www.youtube.com/watch?v=lB95KLmpLR4",
                            Year = 2010
                        },
                        new
                        {
                            Id = 15,
                            Description = "A concierge at a famous hotel gets involved in a theft and murder mystery.",
                            Favorite = false,
                            GenreId = 12,
                            PosterUrl = "https://storage.googleapis.com/pod_public/1300/266322.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Grand Budapest Hotel",
                            TrailerUrl = "https://www.youtube.com/watch?v=1Fg5iWmQjwk",
                            Year = 2014
                        },
                        new
                        {
                            Id = 16,
                            Description = "In a post-apocalyptic wasteland, Furiosa rebels against a tyrant.",
                            Favorite = false,
                            GenreId = 4,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BZDRkODJhOTgtOTc1OC00NTgzLTk4NjItNDgxZDY4YjlmNDY2XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mad Max: Fury Road",
                            TrailerUrl = "https://www.youtube.com/watch?v=hEJnMQG9ev8",
                            Year = 2015
                        },
                        new
                        {
                            Id = 17,
                            Description = "Greed and class discrimination threaten a symbiotic relationship.",
                            Favorite = false,
                            GenreId = 11,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BYjk1Y2U4MjQtY2ZiNS00OWQyLWI3MmYtZWUwNmRjYWRiNWNhXkEyXkFqcGc@._V1_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 29, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Parasite",
                            TrailerUrl = "https://www.youtube.com/watch?v=5xH0HfJHsaY",
                            Year = 2019
                        },
                        new
                        {
                            Id = 18,
                            Description = "A mentally troubled man embarks on a downward spiral of revolution.",
                            Favorite = false,
                            GenreId = 6,
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BNzY3OWQ5NDktNWQ2OC00ZjdlLThkMmItMDhhNDk3NTFiZGU4XkEyXkFqcGc@._V1_.jpg",
                            Rating = 4,
                            StartTime = new DateTime(2025, 8, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Joker",
                            TrailerUrl = "https://www.youtube.com/watch?v=zAGVQLHvwOY",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.SitOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SitOrder");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.SitOrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("Sit")
                        .HasColumnType("int");

                    b.Property<int>("SitOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SitOrderId");

                    b.ToTable("SitOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.SitOrder", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", "User")
                        .WithMany("SitOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.SitOrderDetails", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("SitOrderDetails")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.SitOrder", "SitOrder")
                        .WithMany("SitOrderDetails")
                        .HasForeignKey("SitOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("SitOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.Navigation("SitOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.SitOrder", b =>
                {
                    b.Navigation("SitOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.Navigation("SitOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
